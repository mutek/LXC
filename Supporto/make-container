#!/usr/bin/env bash
# make-container v0.9.14
# Compila un Container LXC
# Luca Cappelletti (c) 2015 <luca.cappelletti@gmail.com>
# WTF
#
# esempio: ./buildLxcContainer.sh ServerPosta wheezy amd64
# costruisce un container di nome ServerPosta con Debian Wheezy per architetture Intel/Amd 64bit
# genera un IP statico random nella rete 10.10.10.0 associato ad un idirizzo di MAC address random

# GENERALI
NOME_CONTAINER=$1
DISTRO_RELEASE=$2
ARCHITETTURA=$3
MIRROR=$4
MAC_ADDRESS=$5
WORKING_DIR=$6
CONTAINER_STATIC_IP=$7
BRIDGE_HOST_IP=$8
EXTRA_DEB=$9

[ "$1" == "--help" ] && { echo "uso: "$0" NOME_CONTAINER DISTRO_RELEASE[wheezy,jessie,...] ARCHITETTURA[i386,amd64,armhf,...] \
MIRROR \
MAC_ADDRESS \
WORKING_DIR \
CONTAINER_STATIC_IP \
BRIDGE_HOST_IP \
EXTRA_DEBS"; exit; }

# verifica la presenza dei tools di comodo
[ $(which mktemp) ] || { echo "ERRORE: mktemp non trovato"; exit; }
[ $(which debootstrap) ] || { echo "ERRORE: debootstrap non trovato"; exit; }
[ $(which rsync) ] || { echo "ERRORE: rsync non trovato"; exit; }
[ $(which lxc-config) ] || { echo "ERRORE: lxc-config non trovato"; exit; }

# assegna default in caso di lacune in input
[ -z $NOME_CONTAINER ] && NOME_CONTAINER=DefaultWheezy
[ -z $DISTRO_RELEASE ] && DISTRO_RELEASE=wheezy
[ -z $ARCHITETTURA ] && ARCHITETTURA=amd64
[ -z $MIRROR ] && MIRROR="http://mirror3.mirror.garr.it/mirrors/debian/"
[ -z $MAC_ADDRESS ] && MAC_ADDRESS=$(echo 00$(od -txC -An -N5 /dev/urandom|tr \  :))
[ -z $WORKING_DIR ] && WORKING_DIR=$(mktemp -u --tmpdir=./ | cut -d"/" -f 2)
[ -z $CONTAINER_STATIC_IP ] && CONTAINER_STATIC_IP="10.10.10."$(dd if=/dev/urandom bs=1 count=1 2>/dev/null | od -An -tu1 | sed -e 's/^ *//' -e 's/  */./g')
[ -z $BRIDGE_HOST_IP ] && BRIDGE_HOST_IP="10.10.10.1"
[ -z $EXTRA_DEBS ] && EXTRA_DEBS=""

# scova dove cova
LXC_CONFIG=$(lxc-config lxc.lxcpath)
INSTALL_ARCH=$ARCHITETTURA

# workaround momentaneo per l'hardpath del lxc config
[ "$ARCHITETTURA" == "i386" ] && INSTALL_ARCH="ia32"

# imposta il security mirror standard
SECURITY_MIRROR="http://security.debian.org/"


echo "NOME_CONTAINER = "$NOME_CONTAINER
echo "DISTRO_RELEASE = "$DISTRO_RELEASE
echo "ARCHITETTURA = "$ARCHITETTURA
echo "MIRROR = "$MIRROR
echo "MAC_ADDRESS = "$MAC_ADDRESS
echo "WORKIG_DIR = "$WORKING_DIR
echo "CONTAINER_STATIC_IP = "$CONTAINER_STATIC_IP
echo "BRIDGE_HOST_IP = "$BRIDGE_HOST_IP
echo "EXTRA_DEBS = "$EXTRA_DEBS
echo "LXC_CONFIG = "$LXC_CONFIG

# -1) sposta nel covo LXC
cd $LXC_CONFIG || { echo "ERRORE: non riesco a spostarmi in: " $LXC_CONFIG; exit; }
ls --color
# 0) verifica accesso alla rete
# FIX: robotica non permette ping esterno...disabilitato momentaneamente
#printf ">> accesso alla rete:"
#ping -q -w 1 -c 1 8.8.8.8 > /dev/null || { echo "ERRORE: non riesco ad accedere ad Internet"; exit; }
#wait
#printf "\t\tok\n"

# build_chroot() si preoccupa di costruire la chroot di base
build_chroot() {
local ARCHITETTURA=$1
local DISTRO_RELEASE=$2
local WORKING_DIR=$3
local MIRROR=$4
local PACCHETTI="ifupdown,locales,libui-dialog-perl,dialog,isc-dhcp-client,netbase,net-tools,iproute,openssh-server,htop,nmap,sshguard,vlan,fail2ban,psmisc,file"

echo "build_chroot: ARCHITETTURA = "$ARCHITETTURA
echo "build_chroot: DISTRO_RELEASE = "$DISTRO_RELEASE
echo "build_chroot: WORKING_DIR = "$WORKING_DIR
echo "build_chroot: MIRROR = "$MIRROR
echo "build_chroot: PACCHETTI = "$PACCHETTI
echo ""
debootstrap --verbose --components=main,restricted,non-free --include=$PACCHETTI --arch $ARCHITETTURA $DISTRO_RELEASE $WORKING_DIR $MIRROR #|| return 1
wait

return 0
}


# 1) genera chroot
printf "build_chroot():\n"
build_chroot $ARCHITETTURA $DISTRO_RELEASE $WORKING_DIR $MIRROR  #|| { echo "ERRORE: non riesco a completare l'operazione di debootstrap"; exit; }
wait
printf "build_chroot(): \t\tok\n"



# -------------------------------------------------------------------------
# 1.1) migra la chroot dalla WORKING_DIR alla rootfs del container locale
# --------------------------------------------------------------------------
# 1.1.1) crea cartella del container
printf "creo $NOME_CONTAINER "
mkdir $NOME_CONTAINER || { echo "ERRORE: non riesco a creare la cartella del Container: "$NOME_CONTAINER; echo ""; exit;}
wait
# 1.1.2) verifica la presenza della cartella del container e della cartella del rootfs
[ -d $NOME_CONTAINER ] || { echo "ERRORE: non trovo la cartella del Container: "$NOME_CONTAINER; ls --color ; exit; }
wait
printf "\t\tok\n"

# 1.1.3) sposta la chroot nella rootfs
printf "sposto chroot in rootfs"

# transaction safe con git || rsync
#rsync -Ha $WORKING_DIR $NOME_CONTAINER/rootfs
mv $WORKING_DIR $NOME_CONTAINER/rootfs || { echo "ERRORE: non riesco a spostare la chroot da "$WORKING_DIR" a "$NOME_CONTAINER/rootfs; exit;}
wait

# 1.1.4) verifica a presenza della cartella rootfs nel container e della validita della chroot
[ -f $NOME_CONTAINER/rootfs/etc/issue ] || { echo "ERRORE: non trovo la rootfs valida in "$NOME_CONTAINER; exit; }
wait
printf "\t\tok\n"


# 2) setup network IP statico nel container
mkdir -p $NOME_CONTAINER/rootfs/etc/network || { echo "ERRORE: non riesco a creare la cartella $NOME_CONTAINER/rootfs/etc/network"; exit 0; }
cat << INTERFACES > $NOME_CONTAINER/rootfs/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
	address $CONTAINER_STATIC_IP
	netmask 255.255.255.0
	gateway 10.10.10.1
INTERFACES

cat $NOME_CONTAINER/rootfs/etc/network/interfaces


# 3)modifica MAC address del file config nella cartella dei metadati del container
cat << CONFIG_LXC > $NOME_CONTAINER/config
#lxc.network.name = eth0
#lxc.network.ipv4 = 10.2.3.1/24 10.2.3.255
#lxc.network.ipv6 = 2003:db8:1:0:214:1234:fe0b:3597
lxc.network.type = veth
lxc.network.link = lxcbr0
lxc.network.flags = up
lxc.network.hwaddr = ${MAC_ADDRESS}
lxc.rootfs = $LXC_CONFIG/$NOME_CONTAINER/rootfs
lxc.include = /opt/Lxc/1.1.2/Debian7/Linux/$INSTALL_ARCH/share/lxc/config/debian.common.conf
lxc.utsname = $NOME_CONTAINER
lxc.arch = $ARCHITETTURA
CONFIG_LXC

cat $NOME_CONTAINER/config
echo ""
# sed -i "s/^lxc.network.hwaddr = .*/lxc.network.hwaddr = ${MAC_ADDRESS}/g" $NOME_CONTAINER/config

# 4) aggiorna sources.list
mkdir -p ${NOME_CONTAINER}/rootfs/etc/apt || { echo "ERRORE: non riesco ad aggiornare il source.list"; exit; }
cat << EOF > ${NOME_CONTAINER}/rootfs/etc/apt/sources.list
# STANDARD
deb $MIRROR          ${DISTRO_RELEASE}         main contrib non-free
deb $SECURITY_MIRROR ${DISTRO_RELEASE}/updates main contrib non-free

# BACKPORTS
deb $MIRROR ${DISTRO_RELEASE}-backports main contrib non-free
deb $MIRROR ${DISTRO_RELEASE}-updates main contrib non-free
deb $MIRROR ${DISTRO_RELEASE}-proposed-updates main contrib non-free

EOF

echo
echo ">> apt-get in guest <<"
echo 
# 4.1 aggiorna gli indici e pulisci archives da residui spuri
chroot ${NOME_CONTAINER}/rootfs /bin/bash -x << 'EOBASH'
apt-get update
apt-get -y --force-yes upgrade
apt-get clean
EOBASH

# 5) configura un resolv.conf di sicurezza
cat << EORESOLV > ${NOME_CONTAINER}/rootfs/etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4
EORESOLV

# 6) eredita il timezone dell'host e lo configura sul guest
[ -f /etc/timezone ] && { cat /etc/timezone > ${NOME_CONTAINER}/rootfs/etc/timezone; chroot ${NOME_CONTAINER}/rootfs dpkg-reconfigure -f noninteractive tzdata; }

# 7) fissa hostname a NOME_CONTAINER
cat << EOHOSTNAME > ${NOME_CONTAINER}/rootfs/etc/hostname
$NOME_CONTAINER
EOHOSTNAME

# 8) rigenera chiavi guest
echo ">> rigenera chiavi <<"
chroot ${NOME_CONTAINER}/rootfs /bin/bash -x << 'EOKEYS'
rm --preserve-root /etc/ssh/ssh_host_*
wait
dpkg-reconfigure -f noninteractive openssh-server
EOKEYS

# 9) wtf locale
chroot ${NOME_CONTAINER}/rootfs /bin/bash -x << 'EOLOCALE'
sed -e "s/^# \(en_US.UTF-8 UTF-8\)/\1/" -i /etc/locale.gen 2> /dev/null
wait
locale-gen en_US.UTF-8 UTF-8
wait
update-locale LANG=en_US.UTF-8
EOLOCALE


# 10) pre configure localepurge
cat << EOLOCALENOPURGE > ${NOME_CONTAINER}/rootfs/etc/locale.nopurge
MANDELETE
DONTBOTHERNEWLOCALE
SHOWFREEDSPACE
#QUICKNDIRTYCALC
#VERBOSE
en_US.UTF-8
EOLOCALENOPURGE

# 11) strip down locales
chroot ${NOME_CONTAINER}/rootfs /bin/bash -x << 'EOLOCALEPURGE'
apt-get --yes --force-yes --assume-yes install localepurge
wait
dpkg-reconfigure -f noninteractive localepurge
wait
localepurge
EOLOCALEPURGE

# 12) install extra debs
chroot ${NOME_CONTAINER}/rootfs /bin/bash -x << 'EOEXTRADEBS'
apt-get --yes --force-yes --assume-yes install $EXTRA_DEBS
wait
apt-get clean
wait
localepurge
EOEXTRADEBS

# 13) log and resume
cat << EOLOG > ${NOME_CONTAINER}/${NOME_CONTAINER}.log
NOME_CONTAINER = $NOME_CONTAINER
DISTRO_RELEASE = $DISTRO_RELEASE
ARCHITETTURA = $ARCHITETTURA
MIRROR = $MIRROR
MAC_ADDRESS = $MAC_ADDRESS
WORKIG_DIR = $WORKING_DIR
CONTAINER_STATIC_IP = $CONTAINER_STATIC_IP
LXC_CONFIG = $LXC_CONFIG
BRIDGE_HOST_IP = $BRIDGE_HOST_IP
EXTRA_DEBS = $EXTRA_DEBS
EOLOG

cat ${NOME_CONTAINER}/${NOME_CONTAINER}.log

